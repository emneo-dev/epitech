#!/usr/bin/env python3

from sys import argv, exit
from math import pow

def check_args():
    possible_figures = [1, 2, 3]
    try:
        int(argv[1])
        int(argv[2])
        int(argv[3])
        int(argv[4])
        int(argv[5])
        int(argv[6])
        int(argv[7])
    except ValueError:
        exit(84)
    if int(argv[1]) not in possible_figures or int(argv[7]) < 0:
        exit(84)

def helper():
    print("USAGE")
    print("\t./105torus opt a0 a1 a2 a3 a4 n")
    print("")
    print("DESCRIPTION")
    print("\topt\tmethod option:")
    print("\t\t\t1 for the bisection method")
    print("\t\t\t2 for Newton's method")
    print("\t\t\t3 for the secant method")
    print("\ta[0-4]\tcoefficients of the equation")
    print("\tn\tprecision (the application of the polynomial to the solution should be smaller than 10^-n)")
    exit(0)

def derivative_function(x, arr):
    ret = 4 * int(arr[4]) * pow(x, 3) + 3 * int(arr[3]) * pow(x, 2) + 2 * int(arr[2]) * x + int(arr[1])
    return (ret)

def function(x, arr):
    ret = int(arr[4]) * pow(x, 4) + int(arr[3]) * pow(x, 3) + int(arr[2]) * pow(x, 2) + int(arr[1]) * x + int(arr[0])
    return (ret)

def bisection(arr):
    x = 0
    y = 1
    z = 0
    i = 1
    it = 0
    while abs(z - i) > pow(10, -int(arr[5])):
        it += 1
        i = z
        z = (x + y) / 2
        if function(x, arr) * function(z, arr) <= 0:
            y = z
        else:
            x = z
        if it < int(arr[5]):
            print("x = %.*f" % (int(it), z))
        else:
            print("x = %.*f" % (int(arr[5]), z))
    exit(0)

def newton(arr):
    x = 0.5
    print("x = " + str(x))
    if derivative_function(x, arr) == 0:
        exit(84)
    while abs(function(x, arr) / derivative_function(x, arr)) > pow(10, -int(arr[5])):
        x -= function(x, arr) / derivative_function(x, arr)
        if pow(10, int(arr[5])) * function(x, arr) % 1 == 0:
            print("x = " + str(x))
        else:
            print("x = %.*f" % (int(arr[5]), x))
        if derivative_function(x, arr) == 0:
            exit(84)
    exit(0)

def secant(arr):
    x = 0
    y = 1
    it = 0
    while abs(x - y) > pow(10, -int(arr[5])):
        it += 1
        if function(y, arr) - function(x, arr) == 0:
            exit(84)
        z = y - ((y - x) / (function(y, arr) - function(x, arr))) * function(y, arr)
        x = y
        y = z
        if it == 1:
            print("x = " + str(z))
        else:
            print("x = %.*f" % (int(arr[5]), z))
    exit(0)

def main():
    if len(argv) == 2 and argv[1] == "-h":
        helper()
    if len(argv) != 8:
        exit(84)
    check_args()
    if argv[1] == "1":
        bisection(argv[2:])
    elif argv[1] == "2":
        newton(argv[2:])
    else:
        secant(argv[2:])

if __name__ == "__main__":
    main()