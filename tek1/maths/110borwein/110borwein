#!/usr/bin/env python3

import sys
from math import sin
import numpy

def helper():
    print("USAGE")
    print("\t./110borwein n")
    print("\nDESCRIPTION")
    print("\tn\tconstant defining the integral to be computed")
    exit(0)

def check_args():
    if len(sys.argv) != 2:
        print("\033[91mError\033[0m: You need to put 1 argument !", file=sys.stderr)
        exit(84)
    if sys.argv[1] == "-h":
        helper()
    try:
        if int(sys.argv[1]) < 0:
            print("\033[91mError\033[0m: Your argument is not positive !", file=sys.stderr)
            exit(84)
        return int(sys.argv[1])
    except:
        print("\033[91mError\033[0m: Your argument is not an int !", file=sys.stderr)
        exit(84)

def function_calculation(x, n):
    sum = 1
    k = 0
    if x == 0:
        return 1
    while (k <= n):
        sum *= sin(x / (2 * k + 1)) / (x / (2 * k + 1))
        k = k + 1
    return (sum)

def simpson(n):
    sum1 = 0
    sum2 = 0

    for i in range(1, 10000):
        sum1 += function_calculation(i * 0.5, n)
    for i in range(10000):
        sum2 += function_calculation(i * 0.5 + 0.25, n)
    sum2 = ((sum1 * 2) + (sum2 * 4) + function_calculation(0, n) + function_calculation(5000, n)) * (5000 / 60000)
    print("Simpson:")
    print("I%d = %.10f" % (n, sum2))
    print("diff = %.10f" % (abs(sum2 - numpy.pi / 2)))

def trapezoidal(n):
    sum = 0
    for i in range(1, 10000):
        sum += function_calculation(i * 0.5, n)
    sum = ((sum * 2) + function_calculation(0, n) + function_calculation(5000, n)) * 0.25
    print("Trapezoidal:")
    print("I%d = %.10f" % (n, sum))
    print("diff = %.10f\n" % (abs(sum - numpy.pi / 2)))

def mid_point(n):
    sum = 0
    for i in range(10000):
        x0 = i * 0.5
        x1 = (i + 1) * 0.5
        x = (x0 + x1) / 2
        sum += function_calculation(x, n)
    sum *= 0.5
    print("Midpoint:")
    print("I%d = %.10f" % (n, sum))
    print("diff = %.10f\n" % (abs(sum - numpy.pi / 2)))

def main():
    n = check_args()
    mid_point(n)
    trapezoidal(n)
    simpson(n)

if __name__ == "__main__":
    main()