#!/usr/bin/env python3

import sys
from math import pow, factorial

def C(k, n):
    return (factorial(n) / (factorial(k) * factorial(n - k)))

# n -> Number of tries
# x -> Number of desidered outcome
# p -> Probability of desired outcome
def binom(n, x, p):
    # To understand this shit show, see the png linked in the repo
    # It
    # Just
    # Works
    return C(x, n) * (p ** x) * (1 - p) ** (n - x)

def binom_more(n, x, p):
    prob = 0
    for i in range(x, n + 1):
        prob += binom(n, i, p)
    return prob

def print_help():
    print('''USAGE
\t./201yams d1 d2 d3 d4 d5 c\n
DESCRIPTION
\td1\tvalue of the first die (0 if not thrown)
\td2\tvalue of the second die (0 if not thrown)
\td3\tvalue of the third die (0 if not thrown)
\td4\tvalue of the fourth die (0 if not thrown)
\td5\tvalue of the fifth die (0 if not thrown)
\tc\texpected combination''')
    exit(0)

def bad_usage():
    print('Invalid usage')
    print('Try ''./201yams -h'' for more information.')
    exit(84)

def check_args(argv):
    if len(sys.argv) != 7:
        bad_usage()
    try:
        dices = [int(n) for n in sys.argv[1:6]]
        expected = [int(n) for n in sys.argv[6].split('_')[1:]]
    except:
        bad_usage()
    for i in dices:
        if i not in range(0, 7):
            bad_usage()
    for i in expected:
        if i not in range(1, 7):
            bad_usage()
    type = sys.argv[6].split('_')[0]
    if type != 'full':
        if len(expected) == 1:
            expected = expected[0]
        else:
            bad_usage()
    else:
        if len(expected) != 2:
            bad_usage()
    return (dices, expected, type)

# calculate

def calculate_pair(dices, expected : int):
    if dices.count(expected) == 0:
        return binom_more(5, 2, 1 / 6)
    if dices.count(expected) == 1:
        return binom_more(4, 1, 1 / 6)
    return 1

def calculate_three(dices, expected : int):
    if dices.count(expected) == 0:
        return binom_more(5, 3, 1 / 6)
    if dices.count(expected) == 1:
        return binom_more(4, 2, 1 / 6)
    if dices.count(expected) == 2:
        return binom_more(3, 1, 1 / 6)
    return 1

def calculate_four(dices, expected : int):
    if dices.count(expected) == 0:
        return binom_more(5, 4, 1 / 6)
    if dices.count(expected) == 1:
        return binom_more(4, 3, 1 / 6)
    if dices.count(expected) == 2:
        return binom_more(3, 2, 1 / 6)
    if dices.count(expected) == 3:
        return binom_more(2, 1, 1 / 6)
    return 1

# Thx a lot to this dude
# https://www.maths-forum.com/lycee/probabilites-jeu-yams-t138064.html
def calculate_full(dices, expected : list):
    if expected[0] == expected[1]:
        bad_usage()
    if dices.count(expected[0]) == 0:
        if dices.count(expected[1]) == 0:
            return C(3, 5) / (6 ** 5)
        if dices.count(expected[1]) == 1:
            return C(3, 4) / (6 ** 4)
        if dices.count(expected[1]) >= 2:
            return binom(3, 3, 1 / 6)
    if dices.count(expected[0]) == 1:
        if dices.count(expected[1]) == 0:
            return C(2, 4) / (6 ** 4)
        if dices.count(expected[1]) == 1:
            return C(2, 3) / (6 ** 3)
        if dices.count(expected[1]) >= 2:
            return binom(2, 2, 1 / 6)
    if dices.count(expected[0]) == 2:
        if dices.count(expected[1]) == 0:
            return C(1, 3) / (6 ** 3)
        if dices.count(expected[1]) == 1:
            return C(1, 2) / (6 ** 2)
        if dices.count(expected[1]) >= 2:
            return binom(1, 1, 1 / 6)
    if dices.count(expected[0]) >= 3:
        if dices.count(expected[1]) == 0:
            return binom(2, 2, 1 / 6)
        if dices.count(expected[1]) == 1:
            return binom(1, 1, 1 / 6)
    return 1

def nb_good_straight(dices, expected : int):
    nb_good = 0
    for dice in range(expected - 4, expected + 1):
        if dice in dices:
            nb_good += 1
    return nb_good

def calculate_straight(dices, expected : int):
    if expected < 5:
        bad_usage()
    if nb_good_straight(dices, expected) == 0:
        return binom(5, 5, 1 / 6)
    if nb_good_straight(dices, expected) == 1:
        return binom(4, 4, 1 / 6)
    if nb_good_straight(dices, expected) == 2:
        return binom(3, 3, 1 / 6)
    if nb_good_straight(dices, expected) == 3:
        return binom(2, 2, 1 / 6)
    if nb_good_straight(dices, expected) == 4:
        return binom(1, 1, 1 / 6)
    return 1

def calculate_yams(dices, expected : int):
    if dices.count(expected) == 0:
        return binom(5, 5, 1 / 6)
    if dices.count(expected) == 1:
        return binom(4, 4, 1 / 6)
    if dices.count(expected) == 2:
        return binom(3, 3, 1 / 6)
    if dices.count(expected) == 3:
        return binom(2, 2, 1 / 6)
    if dices.count(expected) == 4:
        return binom(1, 1, 1 / 6)
    return 1

# main

if __name__ == '__main__':
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help']:
        print_help()

    dices, expected, type = check_args(sys.argv)

    if type == 'pair':
        print(f'Chances to get a {expected} pair: {calculate_pair(dices, expected) * 100:.2f}%')
    elif type == 'three':
        print(f'Chances to get a {expected} three-of-a-kind: {calculate_three(dices, expected) * 100:.2f}%')
    elif type == 'four':
        print(f'Chances to get a {expected} four-of-a-kind: {calculate_four(dices, expected) * 100:.2f}%')
    elif type == 'full':
        print(f'Chances to get a {expected[0]} full of {expected[1]}: {calculate_full(dices, expected) * 100:.2f}%')
    elif type == 'straight':
        print(f'Chances to get a {expected} straight: {calculate_straight(dices, expected) * 100:.2f}%')
    elif type == 'yams':
        print(f'Chances to get a {expected} yams: {calculate_yams(dices, expected) * 100:.2f}%')
    else:
        bad_usage()